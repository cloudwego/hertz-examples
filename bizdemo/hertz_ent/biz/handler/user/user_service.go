/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package user

import (
	"context"
	"fmt"
	"time"

	"github.com/cloudwego/hertz-examples/bizdemo/hertz_ent/biz/model/ent"

	"github.com/cloudwego/hertz-examples/bizdemo/hertz_ent/biz/dal/mysql"
	entUser "github.com/cloudwego/hertz-examples/bizdemo/hertz_ent/biz/model/ent/user"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_ent/biz/model/hertz/user"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_ent/biz/pack"
	"github.com/cloudwego/hertz/pkg/app"
)

// CreateUserResponse .
// @router /v1/user/create [POST]
func CreateUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.CreateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(user.CreateUserResp)

	u, err := mysql.Client.User.Create().
		SetName(req.Name).
		SetGender(int(req.Gender)).
		SetAge(int(req.Age)).
		SetIntroduce(req.Introduce).
		SetCreatedAt(time.Now()).
		SetUpdatedAt(time.Now()).
		Save(ctx)
	if err != nil {
		resp.Code = user.Code_ParamInvalid
		resp.Msg = err.Error()
		c.JSON(200, resp)
		return
	}

	resp.Code = user.Code_Success
	resp.Msg = fmt.Sprintf("Create user %s successfully", u.Name)
	c.JSON(200, resp)
}

// QueryUserResponse .
// @router /v1/user/query [POST]
func QueryUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.QueryUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(user.QueryUserResp)

	query := mysql.Client.User.Query()
	if req.Keyword != "" {
		query = query.Where(entUser.IntroduceContains(req.Keyword))
	}

	var total int
	total, err = query.Count(ctx)
	if err != nil {
		resp.Code = user.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(200, resp)
		return
	}

	var users []*ent.User
	if total > 0 {
		users, err = query.Limit(int(req.PageSize)).Offset(int(req.PageSize * (req.Page - 1))).All(ctx)
		if err != nil {
			resp.Code = user.Code_DBErr
			resp.Msg = err.Error()
			c.JSON(200, resp)
			return
		}
	}

	resp.Code = user.Code_Success
	resp.Total = int64(total)
	resp.User = pack.Users(users)
	c.JSON(200, resp)
}

// UpdateUserResponse .
// @router /v1/user/update/:user_id [POST]
func UpdateUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.UpdateUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(user.UpdateUserResp)

	err = mysql.Client.User.Update().Where(entUser.ID(req.UserID)).
		SetName(req.Name).
		SetGender(int(req.Gender)).
		SetAge(int(req.Age)).
		SetIntroduce(req.Introduce).
		SetUpdatedAt(time.Now()).
		Exec(ctx)
	if err != nil {
		resp.Code = user.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(200, resp)
		return
	}

	resp.Code = user.Code_Success
	resp.Msg = fmt.Sprintf("Update username:%s successfully", req.Name)
	c.JSON(200, resp)
}

// DeleteUserResponse .
// @router /v1/user/delete/:user_id [POST]
func DeleteUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user.DeleteUserReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(400, err.Error())
		return
	}

	resp := new(user.DeleteUserResp)

	err = mysql.Client.User.DeleteOneID(req.UserID).Exec(ctx)
	if err != nil {
		resp.Code = user.Code_DBErr
		resp.Msg = err.Error()
		c.JSON(200, resp)
		return
	}

	resp.Code = user.Code_Success
	resp.Msg = fmt.Sprintf("Delete userID %d successfully", req.UserID)
	c.JSON(200, resp)
}
