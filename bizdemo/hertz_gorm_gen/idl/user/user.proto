syntax = "proto3";

package user;

// biz/model
option go_package = "hertz/user";

import "api.proto";

enum Code {
  Success = 0;
  ParamInvalid = 1;
  DBErr = 2;
}

enum Gender {
  Unknown = 0;
  Male = 1;
  Female = 2;
}

message User{
  int64 user_id = 1;
  string name = 2;
  Gender gender = 3;
  int64  age = 4;
  string introduce = 5;
}

message CreateUserReq{
  string name = 1 [(api.body) = "name", (api.form) = "name", (api.vd) = "(len($) > 0 && len($) < 100)"];
  Gender gender = 2 [(api.body) = "gender", (api.form) = "gender", (api.vd) = "($ == 1||$ == 2)"];
  int64 age = 3 [(api.body) = "age", (api.form) = "age", (api.vd) = "$>0"];
  string introduce = 4 [(api.body) = "introduce", (api.form) = "introduce", (api.vd) = "(len($) > 0 && len($) < 1000)"];
}

message CreateUserResp{
  Code code = 1;
  string msg = 2;
}

message QueryUserReq{
  string keyword = 1 [(api.body) = "keyword", (api.form) = "keyword"];
  int64 page = 2 [(api.body) = "page", (api.form) = "page", (api.vd) = "$>0"];
  int64 page_size = 3 [(api.body) = "page_size", (api.form) = "page_size", (api.vd) = "($ > 0 || $ <= 100)"];
}

message QueryUserResp{
  Code code = 1;
  string msg = 2;
  repeated User user = 3;
  int64 total = 4;
}

message DeleteUserReq{
  int64 user_id = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
}

message DeleteUserResp{
  Code code = 1;
  string msg = 2;
}

message UpdateUserReq{
  int64 user_id = 1 [(api.path) = "user_id", (api.vd) = "$>0"];
  string name = 2 [(api.body) = "name", (api.form) = "name", (api.vd) = "(len($) > 0 && len($) < 100)"];
  Gender gender = 3 [(api.body) = "gender", (api.form) = "gender", (api.vd) = "($ == 1||$ == 2)"];
  int64 age = 4 [(api.body) = "age", (api.form) = "age", (api.vd) = "$>0"];
  string introduce = 5 [(api.body) = "introduce", (api.form) = "introduce", (api.vd) = "(len($) > 0 && len($) < 1000)"];
}

message UpdateUserResp{
  Code code = 1;
  string msg = 2;
}

message OtherResp {
  string msg = 1;
}

service UserService {
  rpc CreateUserResponse(CreateUserReq) returns(CreateUserResp) {
    option (api.post) = "/v1/user/create";
  }
  rpc QueryUserResponse(QueryUserReq) returns(QueryUserResp){
    option (api.post) = "/v1/user/query";
  }
  rpc UpdateUserResponse(UpdateUserReq) returns(UpdateUserResp){
    option (api.post) = "/v1/user/update/:user_id";
  }
  rpc DeleteUserResponse(DeleteUserReq) returns(DeleteUserResp){
    option (api.post) = "/v1/user/delete/:user_id";
  }
}
