/*
 * Copyright 2022 CloudWeGo Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Code generated by hertz generator.

package user

import (
	"context"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_session/biz/handler"
	"net/http"

	"github.com/cloudwego/hertz-examples/bizdemo/hertz_session/biz/dal/mysql"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_session/biz/model/user"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_session/pkg/consts"
	"github.com/cloudwego/hertz-examples/bizdemo/hertz_session/pkg/utils"
	"github.com/cloudwego/hertz/pkg/app"
	result "github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/hertz-contrib/sessions"
)

// Register .
// @router /register [POST]
func Register(ctx context.Context, c *app.RequestContext) {
	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}
	var err error
	var req user.RegisterRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	users, err := mysql.FindUserByNameOrEmail(req.Username, req.Email)
	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	if len(users) != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, consts.RegisterErr})
		return
	}
	if err = mysql.CreateUsers([]*mysql.User{
		{
			Username: req.Username,
			Password: utils.MD5(req.Password),
			Email:    req.Email,
		},
	}); err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	c.JSON(http.StatusOK, user.BaseResp{0, consts.Success})
}

// Login .
// @router /login [POST]
func Login(ctx context.Context, c *app.RequestContext) {
	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}

	var err error
	var req user.LoginRequest

	err = c.BindAndValidate(&req)
	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	users, err := mysql.CheckUser(req.Username, utils.MD5(req.Password))
	if err != nil {

		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	if len(users) == 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, consts.LoginErr})
		return
	}
	session := sessions.Default(c)
	session.Set(consts.Username, req.Username)
	session.Set(consts.Role, users[0].Role)
	_ = session.Save()
	c.JSON(http.StatusOK, user.BaseResp{0, consts.Success})
}

// Logout .
// @router /logout [GET]
func Logout(ctx context.Context, c *app.RequestContext) {
	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}

	session := sessions.Default(c)
	session.Delete(consts.Username)
	session.Clear()
	session.Delete(consts.Role)
	_ = session.Save()
	c.JSON(http.StatusOK, user.BaseResp{0, consts.Success})

}

// FindUser .
// @router /findUser [GET]
func FindUser(ctx context.Context, c *app.RequestContext) {

	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}

	session := sessions.Default(c)

	username := session.Get(consts.Username)

	var err error
	users, err := mysql.CheckUserExists(username.(string))
	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}
	c.JSON(http.StatusOK, result.H{"code": 0, "message": consts.Success, "data": users[0]})

}

// MemberList .
// @router /member/list [GET]
func MemberList(ctx context.Context, c *app.RequestContext) {
	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}

	var err error

	session := sessions.Default(c)

	role := session.Get(consts.Role)

	users, err := mysql.RoleList(role.(string))

	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}

	c.JSON(http.StatusOK, result.H{"code": 0, "message": consts.Success, "data": users})

}

// AdminList .
// @router /admin/list [GET]
func AdminList(ctx context.Context, c *app.RequestContext) {

	res := handler.Auth(ctx, c)
	if res["code"] != 0 {
		c.JSON(http.StatusOK, user.BaseResp{1, res["message"].(string)})
		return
	}

	var err error

	session := sessions.Default(c)

	role := session.Get(consts.Role)

	users, err := mysql.RoleList(role.(string))

	if err != nil {
		c.JSON(http.StatusOK, user.BaseResp{2, err.Error()})
		return
	}

	c.JSON(http.StatusOK, result.H{"code": 0, "message": consts.Success, "data": users})
}
